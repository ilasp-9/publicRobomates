{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","id","height","width","alt","name","email","CardList","robots","cardComponent","map","user","i","SearxhBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","length","SearchBox","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAeeA,EAZF,SAACC,GACT,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAG,+BAA2BF,EAAMG,IAAMC,OAAQ,MAAMC,MAAM,MAAMC,IAAK,WAC9E,sBAAKL,UAAY,KAAjB,UACI,6BAAKD,EAAMO,OACX,4BAAIP,EAAMQ,eCWZC,EAjBE,SAAC,GACjB,IADkBC,EACnB,EADmBA,OAITC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OAAQ,cAAC,EAAD,CAAcX,GAAMO,EAAOI,GAAGX,GAAKI,KAAQG,EAAOI,GAAGP,KAAMC,MAASE,EAAOI,GAAGN,OAAnEM,MAIvB,OACI,8BACKH,KCCEI,EAXG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKhB,UAAY,MAAjB,SACI,uBAAOA,UAAU,sCACjBiB,KAAM,SACNC,YAAc,qBACdC,SAAYH,OCETI,G,MARA,SAACrB,GACZ,OACI,qBAAKsB,MAAS,CAAEC,UAAY,SAAWC,OAAO,kBAAoBpB,OAAO,SAAzE,SACKJ,EAAMyB,aC0CJC,E,kDAvCX,aAAc,IAAD,8BACT,gBAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACb,YAAcY,EAAME,OAAOC,SAd1C,EAAKC,MAAQ,CACTtB,OAAS,GACTM,YAAc,IAJT,E,qDAQb,WAAoB,IAAD,OACfiB,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAK,EAAKR,SAAS,CAACnB,OAAO2B,S,oBAQ1C,WAAS,IAAD,OACEC,EAAeC,KAAKP,MAAMtB,OAAO8B,QAAO,SAAAC,GAC1C,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS,EAAKX,MAAMhB,YAAY0B,kBAIpE,OAAQH,KAAKP,MAAMtB,OAAOkC,OAGtB,sBAAK3C,UAAW,KAAhB,UACI,oBAAIA,UAAY,KAAhB,yBACA,cAAC4C,EAAD,CAAW5B,aAAesB,KAAKZ,iBAC/B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAQ4B,SANtB,oBAAIrC,UAAW,KAAf,iC,GA5BG6C,aCIJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAAO,eAAC,IAAMC,WAAP,eAAmB,cAAC,EAAD,IAAnB,OAA+CC,SAASC,eAAe,SAKvFZ,M","file":"static/js/main.618b31cb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = (props) =>{\r\n     return (\r\n         <div className='bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n             <img src ={`https://robohash.org/${props.id}`} height= '200' width='200' alt ='Robots'/>\r\n             <div className = 'tc'>\r\n                 <h2>{props.name}</h2>\r\n                 <p>{props.email}</p>\r\n             </div>\r\n         </div>\r\n     );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) =>  // you can pass props\r\n{\r\n    // creating var\r\n    // you can use foreach also instead of map()\r\n    const cardComponent = robots.map((user,i) => {\r\n        return (<Card key={i} id = {robots[i].id}  name = {robots[i].name} email = {robots[i].email }/> );\r\n    })\r\n\r\n    // you can get this.props.robots[0].id; \r\n    return (\r\n        <div>      \r\n            {cardComponent}    \r\n         </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n\r\nconst SearxhBox = ({searchField ,searchChange}) => {\r\n    return (\r\n        <div className = 'pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue tc' \r\n            type =\"search\" \r\n            placeholder = \"---search here---!\"\r\n            onChange = {searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearxhBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflowY : 'scroll' , border:'1px solid black' , height:'500px'}} >\r\n            {props.children}\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\nclass App extends  Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchField : '' \r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(response =>  response.json())\r\n        .then(users =>  this.setState({robots:users}));\r\n     //   this.setState({robots:robots}); taking data from api instead of robot.js\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField : event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const filterRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());    \r\n        }) \r\n        \r\n        //ternary statement \r\n        return !this.state.robots.length ? \r\n                <h1 className ='tc'> Loading.......</h1> :\r\n        (\r\n            <div className= 'tc'>\r\n                <h1 className = 'f2'> Robomates </h1>\r\n                <SearchBox searchChange= {this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={filterRobots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n     }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; \nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\n\nReactDOM.render(<React.StrictMode> <App /> </React.StrictMode>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}